1.GET Method
Valid request:
 1.1 Verify GET/locations response include list of all locations
 1.2 Verify GET/locations returns status code 200
 1.3 Verify GET/locations/:name in response are required information of location(id, name, description)
 1.4 Verify GET/locations/:name returns status code 200

 Invalid request:
 1.5 Verify GET/locations/:name for authorized user with parameter name: non-exist, deleted/changed, empty, length less 2, length more 1000 returns status code 400
 1.6 Verify GET/locations for non-authorized user returns status code 401
 1.7 Verify GET/locations/:name for non-authorized user returns status code 401
 1.8 Verify GET/locations/:name for user with valid username and invalid password returns status code 401
 1.9 Verify GET/locations/:name for user with invalid username and valid password returns status code 401
 1.10 Verify GET/locations/:name for user with invalid username and password returns status code 401

 2.POST Method
 Valid request:
 2.1 Verify POST/locations for authorized user create location with data(name, description)
 2.2 Verify POST/locations for authorized user returns status code 201
 2.3 Verify POST/locations for authorized user with length of name 5 characters and length of description 1000 characters create location and returns status code 201
 2.4 Verify POST/locations for authorized user with length of name 1000 characters and length of description 5 characters create location and returns status code 201
 2.5 Verify POST/locations for authorized user with length of name 5-1000 characters and length of description 5-1000 characters create location and returns status code 201

 Invalid request:
 2.6 Verify POST/locations for authorized user with parameter name: empty, length less 2 and more 1000 characters doesn't create a location and returns status code 400
 2.7 Verify POST/locations for authorized user with parameters: length of name less than 5 characters and length description 1000 characters doesn't create a location and returns status code 400
 2.8 Verify POST/locations for authorized user with parameters: length of name 5 characters and length of description less 5 characters doesn't create a location and returns status code 400
 2.9 Verify POST/locations for authorized user with parameters: length of name and description less 5 characters doesn't create a location and returns status code 400
 2.10 Verify POST/locations for authorized user with parameters: length of name and description  more than 1000 characters doesn't create a location and returns status code 400
 2.11 Verify POST/locations for authorized user with parameters: empty name and length of description 1000 characters doesn't create a location and returns status code 400
 2.12 Verify POST/locations for authorized user with parameters: length of name 5 characters and empty description doesn't create a location and returns status code 400
 2.13 Verify POST/locations for authorized user with parameters: empty name and description doesn't create a location and returns status code 400
 2.14 Verify POST/locations for non-authorized user with parameters: length of name 5-1000 characters and length of description 5-1000 characters doesn't create a location and returns status code 401
 2.15 Verify POST/locations for non-authorized user with parameters: empty name and description doesn't create a location and returns status code 401
 2.16 Verify POST/locations for user with valid username and invalid password with parameters: length of name 5-1000 characters and length description 5-1000 characters doesn't create a location returns status code 401
 2.17 Verify POST/locations for user with invalid username and valid password with parameters: length of name 5-1000 characters and length of description 5-1000 characters doesn't create a location returns status code 401
 2.18 Verify POST/locations for user with invalid username and password with parameters: length of name 5-1000 characters  and length of description 5-1000 characters doesn't create a location returns status code 401
 2.19 Verify POST/locations for authorized user with parameter description: empty, length 5-1000 characters, length less 5 characters, length more than 1000 characters doesn't create a location and returns status code 400

 3.PATCH Method
 Valid request:
 3.1 Verify PATCH/locations/:name for authorized user with new_name updates a location
 3.2 Verify PATCH/locations/:name for authorized user responce returns status code 200
 3.3 Verify PATCH/locations/:name for authorized user with length of new_name 5-1000 characters updates a location returns status code 200

 Invalid request:
 3.4 Verify PATCH/locations/:name for authorized user with with parameter new_name: empty, length less 5 characters, length more 1000 characters doesn't update a location and returns status code 400
 3.5 Verify PATCH/locations/:name for non-authorized user with with parameter new_name: length 5-1000 characters doesn't update a location and returns status code 401
 3.6 Verify PATCH/locations/:name for non-authorized user with with parameter new_name: length less 5 characters, more 1000 characters, empty doesn't update a location and returns status code 401
 3.7 Verify PATCH/locations/:name for user with valid username and invalid password with parameter new_name: length less 5 characters, more 1000 characters, empty doesn't update a location and returns status code 401
 3.8 Verify PATCH/locations/:name for user with invalid username and valid password with parameter new_name: length less 5 characters, more 1000 characters, empty doesn't update a location and returns status code 401
 3.9 Verify PATCH/locations/:name for user with invalid username and password with parameter new_name: length less 5 characters, more 1000 characters, empty doesn't update a location and returns status code 401

4.DELETE Method
 Valid request:
 4.1 Verify DELETE/locations/:name with parameter new_name of location for replace, deletes location with name and replaced on new_name location for employees which has deleted location
 4.2 Verify DELETE/locations/:name with valid parameters status code 200

 Invalid request:
 4.3 Verify DELETE/locations/:name for authorized user with name non-exist in database status code 400
 4.4 Verify DELETE/locations/:name for authorized user with same name and new_name returns status code 400
 4.5 Verify DELETE/locations/:name for non-authorized user with new_name non-exist in database returns status code 401
 4.6 Verify DELETE/locations/:name for user with valid username and invalid password with new_name non-exist in database returns status code 401
 4.7 Verify DELETE/locations/:name for user with invalid username and valid password with new_name non-exist in database returns status code 401
 4.8 Verify DELETE/locations/:name for user with invalid username and password with new_name non-exist in database returns status code 401
